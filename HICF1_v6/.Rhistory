ass.pvalues[variables[i]] <- NA
}
genclinv6.ass$Subclones <- as.numeric(genclinv6.ass$Subclones)
genclinv6.ass$Total_num_CNAs <- as.numeric(genclinv6.ass$Total_num_CNAs)
for (i in 1:25){
for (j in 1:25){
ass.pvalues[i, j+1] <- association.pvalue(i, j)
}
}
ass.pvalues[,c(2:26)] <- lapply(ass.pvalues[,c(2:26)], as.numeric)
ass.pvalues.corrected <- as.matrix(ass.pvalues[, -1])
ass.pvalues.corrected <- round(p.adjust(ass.pvalues.corrected, method="fdr"), digits=3)
ass.pvalues.corrected <- split(ass.pvalues.corrected, ceiling(seq_along(ass.pvalues.corrected)/length(ass.pvalues[[1]])))
ass.pvalues[,c(2:26)] <- round(ass.pvalues[,c(2:26)], digits=3)
ass.pvalues.corrected <- as.data.frame(ass.pvalues.corrected)
colnames(ass.pvalues.corrected) <- variables
ass.pvalues.corrected <- cbind(variables, ass.pvalues.corrected)
#write.csv(ass.pvalues, file="/home/andreas/suska/work/01_HICF1/HICF1_sub1/trunk/HICF1_v6/Associationpvalues_v2.csv", sep="\t")
# write.csv(ass.pvalues.corrected, file="/home/andreas/suska/work/01_HICF1/HICF1_sub1/trunk/HICF1_v6/Associationpvalues_corrected_v2.csv", sep="\t")
View(ass.pvalues.corrected)
model.ass.pvalues <- colnames(model.genclinv6.ass)
model.ass.pvalues <- as.data.frame(model.ass.pvalues)
names(model.ass.pvalues)[names(model.ass.pvalues)=="model.ass.pvalues"] <- "variables"
#This just produces a list of all the variables used to go through in the for loops
variables <- colnames(model.genclinv6.ass)
for (i in 1:25){
model.ass.pvalues[,variables[i]] <- NA
}
model.genclinv6.ass$Subclones <- as.numeric(model.genclinv6.ass$Subclones)
model.genclinv6.ass$Total_num_CNAs <- as.numeric(model.genclinv6.ass$Total_num_CNAs)
for (i in 1:25){
for (j in 1:25){
model.ass.pvalues[i, j+1] <- association.pvalue(i, j)
}
}
variables_ass <- c("TP53_ALL", "TP53_mut", "TP53_del", "TP53_cnLOH", "ATM_ALL", "ATM_mut", "ATM_del", "ATM_cnLOH", "BIRC3_ALL", "BIRC3_mut", "BIRC3_del", "NOTCH1_mut", "SF3B1_mut", "X13q_ALL", "X6q._del_ALL", "Trisomy_12", "Trisomy_18", "Trisomy_19", "XPO1_gain", "SAMHD1_ALL", "MYD88_mut", "MED12mutation", "X8q_ALL", "Subclones", "Total_num_CNAs")
model.genclinv6.ass <- model.genclinv6[colnames(model.genclinv6) %in% variables_ass]
model.genclinv6 <-subset(genclinv6, !is.na(genclinv6$MRD))
#These are the variables that we want for the association chart
variables_ass <- c("TP53_ALL", "TP53_mut", "TP53_del", "TP53_cnLOH", "ATM_ALL", "ATM_mut", "ATM_del", "ATM_cnLOH", "BIRC3_ALL", "BIRC3_mut", "BIRC3_del", "NOTCH1_mut", "SF3B1_mut", "X13q_ALL", "X6q._del_ALL", "Trisomy_12", "Trisomy_18", "Trisomy_19", "XPO1_gain", "SAMHD1_ALL", "MYD88_mut", "MED12mutation", "X8q_ALL", "Subclones", "Total_num_CNAs")
model.genclinv6.ass <- model.genclinv6[colnames(model.genclinv6) %in% variables_ass]
source("/home/andreas/suska/work/01_HICF1/HICF1_sub1/trunk/HICF1_v6/Association.R")
#produce a new data frame that contains variable names as first column
#This makes the first column a list of all the variables used
model.ass.pvalues <- colnames(model.genclinv6.ass)
model.ass.pvalues <- as.data.frame(model.ass.pvalues)
names(model.ass.pvalues)[names(model.ass.pvalues)=="model.ass.pvalues"] <- "variables"
#This just produces a list of all the variables used to go through in the for loops
variables <- colnames(model.genclinv6.ass)
for (i in 1:25){
model.ass.pvalues[,variables[i]] <- NA
}
install.packages("abd")
source("oddsratio_abdpackage.R")
source("oddsratio.R")
#This makes an empty data frame with the first line the list of variables used:
ass.oddsratios <- colnames(genclinv6.ass)
ass.oddsratios <- as.data.frame(ass.oddsratios)
names(ass.oddsratios)[names(ass.oddsratios)=="ass.oddsratios"] <- "variables"
for (i in 1:25){
ass.oddsratios[variables[i]] <- NA
}
for (i in 1:25){
source("oddsratios.R")
for (j in 1:25){
ass.oddsratios[i, j+1] <- oddsratio(i, j)
}
}
View(ass.oddsratios)
source("oddsratio.R")
#This makes an empty data frame with the first line the list of variables used:
ass.oddsratios <- colnames(genclinv6.ass)
ass.oddsratios <- as.data.frame(ass.oddsratios)
names(ass.oddsratios)[names(ass.oddsratios)=="ass.oddsratios"] <- "variables"
for (i in 1:25){
ass.oddsratios[variables[i]] <- NA
}
for (i in 1:25){
for (j in 1:25){
ass.oddsratios[i, j+1] <- oddsratio(i, j)
}
}
@
source("oddsratio_abdpackage.R")
#This makes an empty data frame with the first line the list of variables used:
ass.oddsratios_abd <- colnames(genclinv6.ass)
ass.oddsratios_abd <- as.data.frame(ass.oddsratios_abd)
names(ass.oddsratios_abd)[names(ass.oddsratios_abd)=="ass.oddsratios"] <- "variables"
for (i in 1:25){
ass.oddsratios_abd[variables[i]] <- NA
}
for (i in 1:25){
for (j in 1:25){
ass.oddsratios_abd[i, j+1] <- oddsratio_abd(i, j)
}
}
@
<<fig=TRUE, echo=FALSE, eval=TRUE>>=
# Set variables to row.names
row.names(ass.oddsratios) <- ass.oddsratios$variables
ass.oddsratios$variables <- NULL
View(ass.oddsratios_abd)
source("significancelevels.R")
sigstars <- apply(ass.pvalues.corrected[2:26], c(1,2), significancelevels)
#get your own colour scheme
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("yellow", "white", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("brown", "yellow", "white", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
source("oddsratio.R")
#This makes an empty data frame with the first line the list of variables used:
ass.oddsratios <- colnames(genclinv6.ass)
ass.oddsratios <- as.data.frame(ass.oddsratios)
names(ass.oddsratios)[names(ass.oddsratios)=="ass.oddsratios"] <- "variables"
for (i in 1:25){
ass.oddsratios[variables[i]] <- NA
}
for (i in 1:25){
for (j in 1:25){
ass.oddsratios[i, j+1] <- oddsratio(i, j)
}
}
source("significancelevels.R")
sigstars <- apply(ass.pvalues.corrected[2:26], c(1,2), significancelevels)
#get your own colour scheme
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("brown", "yellow", "white", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
row.names(ass.oddsratios) <- ass.oddsratios$variables
ass.oddsratios$variables <- NULL
source("significancelevels.R")
sigstars <- apply(ass.pvalues.corrected[2:26], c(1,2), significancelevels)
#get your own colour scheme
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("brown", "yellow", "white", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
View(ass.oddsratios)
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("blue", "yellow", "white", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("lightblue", "yellow", "white", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("lightblue", "lightgreen", "yellow", "white", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("lightblue", "lightgreen", "yellow", "lightorange", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("lightblue", "lightgreen", "yellow", "orange", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("lightblue", "lightgreen", "orange", "red", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
View(sigstars)
ass.oddsratios.plot <- colnames(genclinv6.ass)
ass.oddsratios.plot <- as.data.frame(ass.oddsratios.plot)
names(ass.oddsratios.plot)[names(ass.oddsratios.plot)=="ass.oddsratios.plot"] <- "variables"
View(ass.oddsratios.plot)
for (i in 1:25){
ass.oddsratios.plot[variables[i]] <- NA
}
ass.oddsratios.plot <- colnames(genclinv6.ass)
ass.oddsratios.plot <- as.data.frame(ass.oddsratios.plot)
names(ass.oddsratios.plot)[names(ass.oddsratios.plot)=="ass.oddsratios.plot"] <- "variables"
for (i in 1:25){
ass.oddsratios.plot[variables[i]] <- NA
}
source("oddsratio.R")
for (i in 1:25){
for (j in 1:25){
if(sigstars[i, j]==""){
ass.oddsratios.plot[i, j+1] <- NA
}
else{
ass.oddsratios.plot[i, j+1] <- oddsratio(i, j)
}
}
}
#get your own colour scheme
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("lightblue", "lightgreen", "orange", "red", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios.plot, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
View(ass.oddsratios.plot)
ass.oddsratio.plot[,c(2:26)] <- as.numeric(ass.oddsratio.plot[,c(2:26)])
ass.oddsratios.plot[,c(2:26)] <- as.numeric(ass.oddsratios.plot[,c(2:26)])
View(ass.oddsratios.plot)
ass.oddsratios.plot$TP53_ALL <- as.numeric(ass.oddsratios.plot$TP53_ALL)
ass.oddsratios.plot[,c(2:26)] <- lapply(as.numeric(ass.oddsratios.plot[,c(2:26)]))
ass.oddsratios.plot[,c(2:26)] <- lapply(ass.oddsratios.plot[,c(2:26)], as.numeric)
library("gplots")
heatmap.2((as.matrix(ass.oddsratios.plot, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
View(ass.oddsratios)
row.names(ass.oddsratios.plot) <- ass.oddsratios.plot$variables
ass.oddsratios.plot$variables <- NULL
library("gplots")
heatmap.2((as.matrix(ass.oddsratios.plot, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
for (i in 1:25){
ass.oddsratios.plot[variables[i]] <- NA
}
source("oddsratio.R")
for (i in 1:25){
for (j in 1:25){
if(sigstars[i, j]==""){
ass.oddsratios.plot[i, j+1] <- -1
}
else{
ass.oddsratios.plot[i, j+1] <- oddsratio(i, j)
}
}
}
ass.oddsratios.plot[,c(2:26)] <- lapply(ass.oddsratios.plot[,c(2:26)], as.numeric)
# Set variables to row.names
row.names(ass.oddsratios.plot) <- ass.oddsratios.plot$variables
ass.oddsratios.plot$variables <- NULL
#get your own colour scheme
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("lightblue", "lightgreen", "orange", "red", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios.plot, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
View(ass.oddsratios.plot)
#Remove all odds ratios with insignificant values:
ass.oddsratios.plot <- colnames(genclinv6.ass)
ass.oddsratios.plot <- as.data.frame(ass.oddsratios.plot)
names(ass.oddsratios.plot)[names(ass.oddsratios.plot)=="ass.oddsratios.plot"] <- "variables"
for (i in 1:25){
ass.oddsratios.plot[variables[i]] <- NA
}
source("oddsratio.R")
for (i in 1:25){
for (j in 1:25){
if(sigstars[i, j]==""){
ass.oddsratios.plot[i, j+1] <- NA
}
else{
ass.oddsratios.plot[i, j+1] <- oddsratio(i, j)
}
}
}
ass.oddsratios.plot[,c(2:26)] <- lapply(ass.oddsratios.plot[,c(2:26)], as.numeric)
# Set variables to row.names
row.names(ass.oddsratios.plot) <- ass.oddsratios.plot$variables
ass.oddsratios.plot$variables <- NULL
#get your own colour scheme
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("lightblue", "lightgreen", "orange", "red", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios.plot, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=TRUE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
source("significancelevels.R")
sigstars <- apply(ass.pvalues.corrected[2:26], c(1,2), significancelevels)
#Remove all odds ratios with insignificant values:
ass.oddsratios.plot <- colnames(genclinv6.ass)
ass.oddsratios.plot <- as.data.frame(ass.oddsratios.plot)
names(ass.oddsratios.plot)[names(ass.oddsratios.plot)=="ass.oddsratios.plot"] <- "variables"
for (i in 1:25){
ass.oddsratios.plot[variables[i]] <- NA
}
source("oddsratio.R")
for (i in 1:25){
for (j in 1:25){
if(sigstars[i, j]==""){
ass.oddsratios.plot[i, j+1] <- NA
}
else{
ass.oddsratios.plot[i, j+1] <- oddsratio(i, j)
}
}
}
ass.oddsratios.plot[,c(2:26)] <- lapply(ass.oddsratios.plot[,c(2:26)], as.numeric)
# Set variables to row.names
row.names(ass.oddsratios.plot) <- ass.oddsratios.plot$variables
ass.oddsratios.plot$variables <- NULL
#get your own colour scheme
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("lightblue", "lightgreen", "orange", "red", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios.plot, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("cadetblue3", "cadetblue1", "aquamarine", "mediumpurple1", "hotpink", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios.plot, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("cadetblue3", "cadetblue1", "mediumpurple1", "hotpink", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios.plot, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("darkseagreen4", "cadetblue3", "cadetblue1", "mediumpurple1", "hotpink", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios.plot, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
install.packages("preprocessCore")
library("RColorBrewer")
oddsratiocolours <- colorRampPalette(c("darkslategrey", "cadetblue3", "cadetblue1", "mediumpurple1", "hotpink", "magenta"))
library("gplots")
heatmap.2((as.matrix(ass.oddsratios.plot, rownames.force=TRUE)), col=oddsratiocolours, scale="none", na.rm=TRUE, key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5, xlab="", ylab="", Rowv=FALSE, Colv=FALSE, cexCol = 0.7, sepwidth=c(0.1,0.1), sepcolor="white", rowsep=c(1:56), colsep=c(1:56), na.color="gray94", cellnote=sigstars, notecol="black", main="Association for n=239")
model.genclinv6 <-subset(genclinv6, !is.na(genclinv6$MRD))
#calculate clones and CNAs as factors:
model.genclinv6$Subclones <- as.factor(ifelse(model.genclinv6$Subclones==0, "0", "1"))
#genclinv6$CNAs_cutoff6 <- as.factor(ifelse(genclinv6$Total_num_CNAs <= 6, "low", "high"))
#SUMMARIZED MODEL
fit.sum.gen1 <-glm(MRD ~ TP53_ALL+
ATM_bi+
BIRC3_mono+
Trisomy_12+
NOTCH1_mut+
SAMHD1_ALL
#SF3B1_mut
, family=binomial(logit), data=model.genclinv6)
#summary(fit.sum.gen1)
fit.sum.gen2 <-glm(MRD ~TP53_ALL+
ATM_bi+
#BIRC3_mono+
#Trisomy_12+
NOTCH1_mut+
SAMHD1_ALL
#SF3B1_mut
, family=binomial(logit), data=model.genclinv6)
#summary(fit.sum.gen2)
#model.genclinv6$TP53_mutdel <- as.factor(ifelse(model.genclinv6$TP53_mut=="1"|model.genclinv6$TP53_del=="1", "1", "0"))
fit.sum.gen3 <-glm(MRD ~ TP53_ALL+
ATM_bi+
#BIRC3_mono+
Trisomy_12+
#NOTCH1_mut+
SAMHD1_ALL
#SF3B1_mut
, family=binomial(logit), data=model.genclinv6)
fit.sum.gen4 <-glm(MRD ~ TP53_ALL+
ATM_bi+
BIRC3_mono+
SAMHD1_ALL
#SF3B1_mut
, family=binomial(logit), data=model.genclinv6)
# fit.sum.gen5 <-glm(MRD ~ TP53_ALL+
#                         ATM_bi+
#                         Trisomy_12+
#                         BIRC3_mono+
#                         SAMHD1_ALL
#                         , family=binomial(logit), data=model.genclinv6)
#
# fit.sum.gen6 <-glm(MRD ~TP53_ALL+
#                         ATM_bi+
#                         #BIRC3_mono+
#                         #Trisomy_12+
#                         #NOTCH1_mut+
#                         SAMHD1_ALL
#                         #SF3B1_mut
#                         , family=binomial(logit), data=model.genclinv6)
fit.sum.gen5 <-glm(MRD ~  Subclones
, family=binomial(logit), data=model.genclinv6)
model.genclinv6.vhmut <- subset(model.genclinv6, !is.na(vh_mutation_status))
fit.vhmut <-glm(MRD ~ vh_mutation_status
, family=binomial(logit), data=model.genclinv6.vhmut)
fit.Binet <-glm(MRD ~ Binet
, family=binomial(logit), data=model.genclinv6)
logregmodels <- list(fit.sum.gen1, fit.sum.gen2,fit.sum.gen3,fit.sum.gen4,fit.sum.gen5, fit.Binet, fit.vhmut)
modelnames <- c("fit.sum.gen1", "fit.sum.gen2","fit.sum.gen3","fit.sum.gen4","fit.sum.gen5", "fit.Binet", "fit.vhmut")
missclasserror<- data.frame(matrix(NA, nrow = length(logregmodels), ncol = 5))
colnames(missclasserror) <- c("model", "correct_MRD_neg","false_MRD_neg", "correct_MRD_pos", "false_MRD_pos")
missclasserror$model <- c("genetic1", "genetic2", "genetic3", "genetic4","genetic5", "Binet", "vh mutation")
model.genclinv6[, c(54:63)] <- NA
for (i in 1:7){
if (i==7){
model.genclinv6.vhmut <- subset(model.genclinv6, !is.na(vh_mutation_status))
model.genclinv6.vhmut$predict <- predict(logregmodels[[i]], type="response")
model.genclinv6.vhmut$class <-ifelse(model.genclinv6.vhmut$predict > 0.5, "MRD positive", "MRD negative")
missclasserror$correct_MRD_neg[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[1]
missclasserror$false_MRD_neg[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[2]
missclasserror$correct_MRD_pos[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[4]
missclasserror$false_MRD_pos[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[3]
missclasserror$missclasserr[i] <- (missclasserror$false_MRD_pos[i]+missclasserror$false_MRD_neg[i])/181
}
else{
model.genclinv6[53+i] <- predict(logregmodels[[i]], type="response")
model.genclinv6[61+i] <- ifelse(model.genclinv6[53+i] > 0.5, "MRD positive", "MRD negative")
missclasserror$correct_MRD_neg[i] <- table(model.genclinv6$MRD, model.genclinv6[,61+i])[1]
missclasserror$false_MRD_neg[i] <- table(model.genclinv6$MRD, model.genclinv6[,61+i])[2]
missclasserror$correct_MRD_pos[i] <- table(model.genclinv6$MRD, model.genclinv6[,61+i])[4]
missclasserror$false_MRD_pos[i] <- table(model.genclinv6$MRD, model.genclinv6[,61+i])[3]
missclasserror$missclasserr[i] <- (missclasserror$false_MRD_pos[i]+missclasserror$false_MRD_neg[i])/209
}
names(model.genclinv6)[62:69] <- c("genetic1", "genetic2", "genetic3", "genetic4","genetic5", "Binet", "vh mutation")
missclasserror$unclassified <- c(0, 0, 0, 0, 0, 0, 0,29/209)
View(missclasserror)
View(missclasserror)
View(missclasserror)
View(missclasserror)
View(missclasserror)
View(missclasserror)
modelnames <- c("fit.sum.gen1", "fit.sum.gen2","fit.sum.gen3","fit.sum.gen4","fit.sum.gen5", "fit.Binet", "fit.vhmut")
missclasserror<- data.frame(matrix(NA, nrow = length(logregmodels), ncol = 5))
colnames(missclasserror) <- c("model", "correct_MRD_neg","false_MRD_neg", "correct_MRD_pos", "false_MRD_pos")
missclasserror$model <- c("genetic1", "genetic2", "genetic3", "genetic4","genetic5", "Binet", "vh mutation")
model.genclinv6[, c(54:63)] <- NA
model.genclinv6[, c(54:61)] <- NA
for (i in 1:7){
if (i==7){
model.genclinv6.vhmut <- subset(model.genclinv6, !is.na(vh_mutation_status))
model.genclinv6.vhmut$predict <- predict(logregmodels[[i]], type="response")
model.genclinv6.vhmut$class <-ifelse(model.genclinv6.vhmut$predict > 0.5, "MRD positive", "MRD negative")
missclasserror$correct_MRD_neg[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[1]
missclasserror$false_MRD_neg[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[2]
missclasserror$correct_MRD_pos[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[4]
missclasserror$false_MRD_pos[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[3]
missclasserror$missclasserr[i] <- (missclasserror$false_MRD_pos[i]+missclasserror$false_MRD_neg[i])/181
}
else{
model.genclinv6[53+i] <- predict(logregmodels[[i]], type="response")
model.genclinv6[60+i] <- ifelse(model.genclinv6[53+i] > 0.5, "MRD positive", "MRD negative")
missclasserror$correct_MRD_neg[i] <- table(model.genclinv6$MRD, model.genclinv6[,59+i])[1]
missclasserror$false_MRD_neg[i] <- table(model.genclinv6$MRD, model.genclinv6[,59+i])[2]
missclasserror$correct_MRD_pos[i] <- table(model.genclinv6$MRD, model.genclinv6[,59+i])[4]
missclasserror$false_MRD_pos[i] <- table(model.genclinv6$MRD, model.genclinv6[,59+i])[3]
missclasserror$missclasserr[i] <- (missclasserror$false_MRD_pos[i]+missclasserror$false_MRD_neg[i])/209
}
}
model.genclinv6[53+i] <- predict(logregmodels[[1]], type="response")
View(model.genclinv6)
model.genclinv6[53+1] <- predict(logregmodels[[1]], type="response")
logregmodels[[1]]
model.genclinv6[53+1] <- predict(logregmodels[[1]], type="response")
model.genclinv6[53+1] <- predict(logregmodels[1], type="response")
model.genclinv6$predict <- predict(logregmodels[1], type="response")
model.genclinv6$predict <- predict(logregmodels[[1]], type="response")
model.genclinv6.vhmut$predict <- predict(logregmodels[[7]], type="response")
logregmodels <- list(fit.sum.gen1, fit.sum.gen2,fit.sum.gen3,fit.sum.gen4,fit.sum.gen5, fit.Binet, fit.vhmut)
model.genclinv6.vhmut$predict <- predict(logregmodels[[7]], type="response")
model.genclinv6.vhmut$class <-ifelse(model.genclinv6.vhmut$predict > 0.5, "MRD positive", "MRD negative")
View(sigstars)
logregmodels <- list(fit.sum.gen1, fit.sum.gen2, fit.sum.gen3, fit.sum.gen4, fit.sum.gen5, fit.Binet, fit.vhmut)
modelnames <- c("fit.sum.gen1", "fit.sum.gen2","fit.sum.gen3","fit.sum.gen4","fit.sum.gen5", "fit.Binet", "fit.vhmut")
#make empty dataframe for results
missclasserror<- data.frame(matrix(NA, nrow = length(logregmodels), ncol = 5))
colnames(missclasserror) <- c("model", "correct_MRD_neg","false_MRD_neg", "correct_MRD_pos", "false_MRD_pos")
missclasserror$model <- c("genetic1", "genetic2", "genetic3", "genetic4","genetic5", "Binet", "vh mutation")
model.genclinv6[, c(54:61)] <- NA
for (i in 1:7){
if (i==7){
model.genclinv6.vhmut <- subset(model.genclinv6, !is.na(vh_mutation_status))
model.genclinv6.vhmut$predict <- predict(logregmodels[[7]], type="response")
model.genclinv6.vhmut$class <-ifelse(model.genclinv6.vhmut$predict > 0.5, "MRD positive", "MRD negative")
missclasserror$correct_MRD_neg[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[1]
missclasserror$false_MRD_neg[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[2]
missclasserror$correct_MRD_pos[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[4]
missclasserror$false_MRD_pos[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[3]
missclasserror$missclasserr[i] <- (missclasserror$false_MRD_pos[i]+missclasserror$false_MRD_neg[i])/181
}
else{
model.genclinv6$predict <- predict(logregmodels[[1]], type="response")
model.genclinv6[60+i] <- ifelse(model.genclinv6[53+i] > 0.5, "MRD positive", "MRD negative")
missclasserror$correct_MRD_neg[i] <- table(model.genclinv6$MRD, model.genclinv6[,59+i])[1]
missclasserror$false_MRD_neg[i] <- table(model.genclinv6$MRD, model.genclinv6[,59+i])[2]
missclasserror$correct_MRD_pos[i] <- table(model.genclinv6$MRD, model.genclinv6[,59+i])[4]
missclasserror$false_MRD_pos[i] <- table(model.genclinv6$MRD, model.genclinv6[,59+i])[3]
missclasserror$missclasserr[i] <- (missclasserror$false_MRD_pos[i]+missclasserror$false_MRD_neg[i])/209
}
}
fit.sum.gen5 <-glm(MRD ~  Subclones
, family=binomial(logit), data=model.genclinv6)
fit.sum.gen5
summary(fit.sum.gen5)
summary(fit.sum.gen5)
fit.vhmut
fit.sum.gen5
fit.Binet
logregmodels <- list(fit.sum.gen1, fit.sum.gen2, fit.sum.gen3, fit.sum.gen4, fit.sum.gen5, fit.Binet, fit.vhmut)
modelnames <- c("fit.sum.gen1", "fit.sum.gen2","fit.sum.gen3","fit.sum.gen4","fit.sum.gen5", "fit.Binet", "fit.vhmut")
missclasserror<- data.frame(matrix(NA, nrow = length(logregmodels), ncol = 5))
colnames(missclasserror) <- c("model", "correct_MRD_neg","false_MRD_neg", "correct_MRD_pos", "false_MRD_pos")
missclasserror$model <- c("genetic1", "genetic2", "genetic3", "genetic4","genetic5", "Binet", "vh mutation")
model.genclinv6 <-subset(genclinv6, !is.na(genclinv6$MRD))
model.genclinv6[, c(54:61)] <- NA
model.genclinv6.vhmut <- subset(model.genclinv6, !is.na(vh_mutation_status))
model.genclinv6.vhmut$predict <- predict(logregmodels[[7]], type="response")
View(model.genclinv6.vhmut)
model.genclinv6$predict <- predict(logregmodels[[1]], type="response")
model.genclinv6[53+i] <- predict(logregmodels[[1]], type="response")
model.genclinv6[53+1] <- predict(logregmodels[[1]], type="response")
for (i in 1:7){
if (i==7){
model.genclinv6.vhmut <- subset(model.genclinv6, !is.na(vh_mutation_status))
model.genclinv6.vhmut$predict <- predict(logregmodels[[7]], type="response")
model.genclinv6.vhmut$class <-ifelse(model.genclinv6.vhmut$predict > 0.5, "MRD positive", "MRD negative")
missclasserror$correct_MRD_neg[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[1]
missclasserror$false_MRD_neg[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[2]
missclasserror$correct_MRD_pos[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[4]
missclasserror$false_MRD_pos[i] <- table(model.genclinv6.vhmut$MRD, model.genclinv6.vhmut$class)[3]
missclasserror$missclasserr[i] <- (missclasserror$false_MRD_pos[i]+missclasserror$false_MRD_neg[i])/181
}
else{
model.genclinv6[53+i] <- predict(logregmodels[[1]], type="response")
model.genclinv6[59+i] <- ifelse(model.genclinv6[53+i] > 0.5, "MRD positive", "MRD negative")
missclasserror$correct_MRD_neg[i] <- table(model.genclinv6$MRD, model.genclinv6[,59+i])[1]
missclasserror$false_MRD_neg[i] <- table(model.genclinv6$MRD, model.genclinv6[,59+i])[2]
missclasserror$correct_MRD_pos[i] <- table(model.genclinv6$MRD, model.genclinv6[,59+i])[4]
missclasserror$false_MRD_pos[i] <- table(model.genclinv6$MRD, model.genclinv6[,59+i])[3]
missclasserror$missclasserr[i] <- (missclasserror$false_MRD_pos[i]+missclasserror$false_MRD_neg[i])/209
}
}
